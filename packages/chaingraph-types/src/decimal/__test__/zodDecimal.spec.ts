import { ZodDecimal } from '@badaitech/chaingraph-types/decimal/zodDecimal'
import Decimal from 'decimal.js'
import { describe, expect, it } from 'vitest'

describe('zodDecimal', () => {
  const schema = ZodDecimal.create()
  const gtFive = schema.gt(5)
  const gteFive = schema.gte(5)
  const minFive = schema.min(5)
  const ltFive = schema.lt(5)
  const lteFive = schema.lte(5)
  const maxFive = schema.max(5)
  const positive = schema.positive()
  const negative = schema.negative()
  const nonpositive = schema.nonpositive()
  const nonnegative = schema.nonnegative()
  const wholeNumberOf2 = schema.wholeNumber(2)
  const precisionOf2 = schema.precision(2)
  const finite = schema.finite()
  const safe = schema.safe()
  const coerce = ZodDecimal.create({ coerce: true })

  it('passing validations', () => {
    schema.parse(1)
    schema.parse(1.5)
    schema.parse(0)
    schema.parse(-1.5)
    schema.parse(-1)
    schema.parse(Infinity)
    schema.parse(-Infinity)
    gtFive.parse(6)
    gtFive.parse(Infinity)
    gteFive.parse(5)
    gteFive.parse(Infinity)
    minFive.parse(5)
    minFive.parse(Infinity)
    ltFive.parse(4)
    ltFive.parse(-Infinity)
    lteFive.parse(5)
    lteFive.parse(-Infinity)
    maxFive.parse(5)
    maxFive.parse(-Infinity)
    positive.parse(1)
    positive.parse(Infinity)
    negative.parse(-1)
    negative.parse(-Infinity)
    nonpositive.parse(0)
    nonpositive.parse(-1)
    nonpositive.parse(-Infinity)
    nonnegative.parse(0)
    nonnegative.parse(1)
    nonnegative.parse(Infinity)
    wholeNumberOf2.parse(99)
    precisionOf2.parse(123.25)
    finite.parse(123)
    safe.parse(Number.MIN_SAFE_INTEGER)
    safe.parse(Number.MAX_SAFE_INTEGER)

    schema.parse(new Decimal(123.4567))
    wholeNumberOf2.parse(new Decimal(98.7654))
    precisionOf2.parse(new Decimal(17.76))
    coerce.parse('123.4567')
  })

  it('failing validations', () => {
    expect(() => ltFive.parse(5)).toThrow()
    expect(() => lteFive.parse(6)).toThrow()
    expect(() => maxFive.parse(6)).toThrow()
    expect(() => gtFive.parse(5)).toThrow()
    expect(() => gteFive.parse(4)).toThrow()
    expect(() => minFive.parse(4)).toThrow()
    expect(() => positive.parse(0)).toThrow()
    expect(() => positive.parse(-1)).toThrow()
    expect(() => negative.parse(0)).toThrow()
    expect(() => negative.parse(1)).toThrow()
    expect(() => nonpositive.parse(1)).toThrow()
    expect(() => nonnegative.parse(-1)).toThrow()
    expect(() => wholeNumberOf2.parse(999)).toThrow()
    expect(() => precisionOf2.parse(123.123)).toThrow()
    expect(() => finite.parse(Infinity)).toThrow()
    expect(() => finite.parse(-Infinity)).toThrow()
    expect(() => safe.parse(Number.MIN_SAFE_INTEGER - 1)).toThrow()
    expect(() => safe.parse(Number.MAX_SAFE_INTEGER + 1)).toThrow()
  })

  it('parse NaN', () => {
    expect(() => schema.parse(Number.NaN)).toThrow()
  })

  it('min max getters', () => {
    expect(schema.minValue).toBeNull()
    expect(ltFive.minValue).toBeNull()
    expect(lteFive.minValue).toBeNull()
    expect(maxFive.minValue).toBeNull()
    expect(negative.minValue).toBeNull()
    expect(nonpositive.minValue).toBeNull()
    expect(finite.minValue).toBeNull()
    expect(gtFive.minValue).toEqual(5)
    expect(gteFive.minValue).toEqual(5)
    expect(minFive.minValue).toEqual(5)
    expect(minFive.min(10).minValue).toEqual(10)
    expect(positive.minValue).toEqual(0)
    expect(nonnegative.minValue).toEqual(0)
    expect(safe.minValue).toEqual(Number.MIN_SAFE_INTEGER)

    expect(schema.maxValue).toBeNull()
    expect(gtFive.maxValue).toBeNull()
    expect(gteFive.maxValue).toBeNull()
    expect(minFive.maxValue).toBeNull()
    expect(positive.maxValue).toBeNull()
    expect(nonnegative.maxValue).toBeNull()
    expect(finite.minValue).toBeNull()
    expect(ltFive.maxValue).toEqual(5)
    expect(lteFive.maxValue).toEqual(5)
    expect(maxFive.maxValue).toEqual(5)
    expect(maxFive.max(1).maxValue).toEqual(1)
    expect(negative.maxValue).toEqual(0)
    expect(nonpositive.maxValue).toEqual(0)
    expect(safe.maxValue).toEqual(Number.MAX_SAFE_INTEGER)
  })

  it('finite getter', () => {
    expect(schema.isFinite).toEqual(false)
    expect(gtFive.isFinite).toEqual(false)
    expect(gteFive.isFinite).toEqual(false)
    expect(minFive.isFinite).toEqual(false)
    expect(positive.isFinite).toEqual(false)
    expect(nonnegative.isFinite).toEqual(false)
    expect(ltFive.isFinite).toEqual(false)
    expect(lteFive.isFinite).toEqual(false)
    expect(maxFive.isFinite).toEqual(false)
    expect(negative.isFinite).toEqual(false)
    expect(nonpositive.isFinite).toEqual(false)

    expect(finite.isFinite).toEqual(true)
    expect(schema.min(5).max(10).isFinite).toEqual(true)
    expect(safe.isFinite).toEqual(true)
  })
})
