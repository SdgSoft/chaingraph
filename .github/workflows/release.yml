name: Release

on:
  push:
    branches:
      - main
  release:
    types: [created]

# Prevent concurrent releases
concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write
  packages: write
  pull-requests: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NODE_VERSION: 22.14.0
  PNPM_VERSION: 10.5.2

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://npm.pkg.github.com'
          scope: '@badaitech'

      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint check
        run: pnpm run lint

      - name: Run tests
        run: pnpm run test

      - name: Build packages
        run: pnpm run build

      # Create .npmrc file for GitHub Packages
      - name: Setup .npmrc
        run: |
          echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" > .npmrc
          echo "@badaitech:registry=https://npm.pkg.github.com" >> .npmrc

      # For GitHub releases, publish directly with version from tag
      - name: Publish packages from release
        if: github.event_name == 'release'
        run: |
          TAG_VERSION="${{ github.event.release.tag_name }}"
          # Remove 'v' prefix if present
          VERSION="${TAG_VERSION#v}"
          echo "Setting version to $VERSION for all packages"
          pnpm -r exec -- npm version $VERSION --no-git-tag-version
          echo "Publishing release packages..."
          pnpm -r publish --access restricted --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Use changesets action for main branch pushes
      - name: Create Release PR or Publish
        if: github.event_name == 'push'
        uses: changesets/action@v1
        with:
          version: pnpm run changeset:version
          publish: pnpm run changeset:publish
          commit: 'chore: update package versions'
          title: 'chore: update package versions'
          createGithubReleases: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
