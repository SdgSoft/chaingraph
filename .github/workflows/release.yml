name: Release

on:
  push:
    branches:
      - main
  release:
    types: [created]

permissions:
  contents: write
  packages: write
  pull-requests: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NODE_VERSION: 22.14.0
  PNPM_VERSION: 10.5.2

jobs:
  # Build job to verify everything compiles correctly
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run lint
        run: pnpm run lint

      - name: Run tests
        run: pnpm run test

      - name: Build packages
        run: pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/*/dist
            apps/*/dist
          retention-days: 1

  # Check for changesets and prerelease status
  check-status:
    name: Check repository status
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    outputs:
      has_changesets: ${{ steps.check.outputs.has_changesets }}
      is_prerelease: ${{ steps.prerelease.outputs.is_prerelease }}
      prerelease_tag: ${{ steps.prerelease.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug changeset directory
        run: |
          echo "Listing .changeset directory contents:"
          ls -la .changeset/
          echo "Changeset files (excluding README and config):"
          find .changeset -type f -not -name "README.md" -not -name "config.json" -ls

      - name: Check for changesets
        id: check
        run: |
          if [ -n "$(find .changeset -type f -name "*.md" -not -name "README.md")" ]; then
            echo "has_changesets=true" >> $GITHUB_OUTPUT
            echo "Changesets found"
          else
            echo "has_changesets=false" >> $GITHUB_OUTPUT
            echo "No changesets found"
          fi

      - name: Check prerelease status
        id: prerelease
        run: |
          if [ -f ".changeset/pre.json" ]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            TAG=$(grep -o '"tag": *"[^"]*"' .changeset/pre.json | sed 's/"tag": *"\([^"]*\)"/\1/')
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "In prerelease mode with tag: $TAG"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "tag=" >> $GITHUB_OUTPUT
            echo "Not in prerelease mode"
          fi

  # Dev versions job - automatically publish dev versions from main when no changesets exist
  dev-publish:
    name: Publish dev versions
    needs: [build, check-status]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && needs.check-status.outputs.has_changesets == 'false' && needs.check-status.outputs.is_prerelease == 'false'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://npm.pkg.github.com'
          scope: '@badaitech'

      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Generate short commit hash
        id: commit_hash
        run: |
          SHORT_HASH=$(git rev-parse --short HEAD)
          echo "short_hash=$SHORT_HASH" >> $GITHUB_OUTPUT

      - name: Update package versions with dev suffix
        run: |
          SHORT_HASH="${{ steps.commit_hash.outputs.short_hash }}"
          # Update all package versions with dev suffix - this OVERWRITES existing versions
          pnpm -r exec -- node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
            const originalVersion = pkg.version;
            // Add dev suffix to version (keeping the original version number)
            pkg.version = originalVersion.includes('-dev.')
              ? originalVersion.replace(/-dev\.[a-f0-9]+$/, '-dev.${SHORT_HASH}')
              : originalVersion + '-dev.${SHORT_HASH}';
            fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
            console.log('Updated', pkg.name, 'from', originalVersion, 'to', pkg.version);
          "

      - name: Set up .npmrc for publishing
        run: |
          echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" > .npmrc
          echo "@badaitech:registry=https://npm.pkg.github.com" >> .npmrc

      - name: Publish dev versions
        run: |
          echo "Publishing dev versions..."
          pnpm -r publish --access restricted --no-git-checks --tag dev
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Version and publish using changesets/action
  version-publish:
    name: Version and publish packages
    needs: [build, check-status]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && needs.check-status.outputs.has_changesets == 'true') || github.event_name == 'release'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://npm.pkg.github.com'
          scope: '@badaitech'

      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        if: github.event_name == 'release'
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Set up .npmrc for publishing
        run: |
          echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" > .npmrc
          echo "@badaitech:registry=https://npm.pkg.github.com" >> .npmrc

      # For GitHub releases, set the version from the tag and publish directly
      - name: Set version from release tag and publish
        if: github.event_name == 'release'
        run: |
          TAG_VERSION="${{ github.event.release.tag_name }}"
          # Remove 'v' prefix if present
          VERSION="${TAG_VERSION#v}"
          echo "Setting version to $VERSION for all packages"
          pnpm -r exec -- npm version $VERSION --no-git-tag-version
          echo "Publishing release packages..."
          pnpm -r publish --access restricted --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Use changesets/action for creating version PRs
      - name: Create version PR
        if: github.event_name == 'push' && needs.check-status.outputs.has_changesets == 'true'
        uses: changesets/action@v1
        with:
          publish: false
          version: true
          commit: 'chore: update package versions'
          title: 'chore: update package versions'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
