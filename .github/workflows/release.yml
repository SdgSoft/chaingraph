name: Release

on:
  push:
    branches:
      - main
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      publish:
        description: Publish packages to npm
        type: boolean
        default: false
      version:
        description: Create changeset version PR
        type: boolean
        default: false

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NODE_VERSION: 22.14.0
  PNPM_VERSION: 10.5.2

jobs:
  # Build job to verify everything compiles correctly
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run lint
        run: pnpm run lint

      - name: Run tests
        run: pnpm run test

      - name: Build packages
        run: pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/*/dist
            apps/*/dist
          retention-days: 1

  # Changesets version job - create version PR when changes are detected
  version:
    name: Create version PR
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.version == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create version PR
        uses: changesets/action@v1
        with:
          publish: false
          version: pnpm changeset version
          commit: 'chore: update package versions'
          title: 'chore: update package versions'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Release job - triggered by GitHub release creation or manual trigger
  release:
    name: Publish packages
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.event.inputs.publish == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://npm.pkg.github.com'
          scope: '@badaitech'

      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Configure Git User
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # For GitHub releases, set the version from the tag
      - name: Set version from release tag
        if: github.event_name == 'release'
        run: |
          TAG_VERSION="${{ github.event.release.tag_name }}"
          # Remove 'v' prefix if present
          VERSION="${TAG_VERSION#v}"
          echo "Setting version to $VERSION for all packages"
          pnpm -r exec -- npm version $VERSION --no-git-tag-version

      # For manual or release publish, use changesets
      - name: Publish packages
        run: |
          # If it's a GitHub release, publish with the right version
          if [ "${{ github.event_name }}" == "release" ]; then
            echo "Publishing release packages..."
            pnpm -r publish --access restricted --no-git-checks
          else
            echo "Publishing packages using changeset..."
            pnpm changeset publish --no-git-tag
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub release for changesets
        if: github.event_name != 'release' && github.event.inputs.publish == 'true'
        uses: changesets/action@v1
        with:
          publish: false # We've already published
          createGithubReleases: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
